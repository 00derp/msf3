module Msf

require 'msf/core/exploit/tcp'

###
#
# This module exposes methods that may be useful to exploits that deal with
# servers that speak the Internet Relay Chat protocol (IRC).
#
###
module Exploit::Remote::Irc

	include Exploit::Remote::Tcp
	
	#
	# Creates an instance of an IRC exploit module.
	#
	def initialize(info = {})
		super

		# Register the options that all IRC exploits may make use of.
		register_options(
			[
				Opt::RHOST,
				Opt::RPORT(6667),
				OptString.new('IRCNICK', [ false, 'The nickname to identify as', 'anonymous']),
			], Msf::Exploit::Remote::Irc)
	end

	#
	# This method establishes an IRC connection to host and port specified by
	# the RHOST and RPORT options, respectively.  After connecting, the banner
	# message is read in and stored in the 'banner' attribute.
	#
	def connect(global = true, verbose = true)
		print_status("Connecting to IRC server #{rhost}:#{rport}...") if verbose

		fd = super(global)
	
		# Wait for a banner to arrive...
		self.banner = fd.get

		print_status("Connected to target IRC server.") if verbose
	
		# Return the file descriptor to the caller
		fd
	end

	#
	# Connect and login to the remote IRC server using the credentials 
	# that have been supplied in the exploit options.
	#
	def connect_login(global = true, verbose = true)
		ircsock = connect(global, verbose)

		res = send_nick(user, ircsock)
		
        raw_send("USER blah blah blah :blah blah")
        send_user("
        sleep 2
        raw_send("JOIN #{datastore['CHANNEL']}")
		
		return true
	end

	#
	# This method logs in as the supplied nick by transmitting the IRC
	# 'NICK <user>' command.
	#
	def send_nick(user, nsock = self.sock)
		raw_send_recv("NICK #{user}", nsock)
	end

	#
	# This method sends one command with zero or more parameters
	#
	def send_cmd(args, recv = true, nsock = self.sock)
		cmd = args.join(" ") + "\n"
		if (recv)
			return raw_send_recv(cmd, nsock)
		else
			return raw_send(cmd, nsock)
		end
	end
	
	#
	# This method transmits a FTP command and waits for a response.  If one is
	# received, it is returned to the caller.
	#
	def raw_send_recv(cmd, nsock = self.sock)
		nsock.put(cmd)
		nsock.get_once
	end
	
	#
	# This method transmits a FTP command and does not wait for a response
	#
	def raw_send(cmd, nsock = self.sock)
		nsock.put(cmd)
	end
	
	##
	#
	# Wrappers for getters
	#
	##

	#
	# Returns the user string from the 'FTPUSER' option.
	#
	def user
		datastore['IRCNICK']
	end

protected

	#
	# This attribute holds the banner that was read in after a successful call
	# to connect or connect_login.
	#
	attr_accessor :banner

end

end
